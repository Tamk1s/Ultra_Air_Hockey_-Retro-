/*
#include "../inc/stick.h"

/*Routine to check collision between sticks &
  objects, pucks, centerline, and border*/
//ID=player to process
/*
void StickCollide(u8 ID)
{

 u8 i;  //Generic counter variable #1
 u8 Hit;//Was there a collision?

 //Process the player

    //Get sprite vars for player being processed. Use as Pt(1). Pt(2)=thing collided with
    GetBox 1, P_hand(P), #PTRUE, P_angle(P), P_v(P)

    //Check board bounds

	//Left border
    if Box_x1(1)<=#ORIGIN+2 then
        GSpritePut #ORIGIN+2, Box_y1(1), Box_hand(1),#FALSE 'Fix OOB collision
        GetBox 1, P_hand(P), #PTRUE, P_angle(P), P_v(P) 'Update sprite vars
        'Change collision sfx dependent on i_f Big or little stick
        if P_aPwr(P)=2 then
        	E_ID=30:E_act=1:E_bank=0:gosub Echo
        else
            E_ID=4:E_act=1:E_bank=0:gosub Echo
        ENDIF
    ENDIF

    'Same idea for top, right, and bottom borders
    'Top border
    if Box_y1(1)<=#ORIGIN+2 then
        GSpritePut Box_x1(1), #ORIGIN + 2, Box_hand(1), #FALSE
        GetBox 1, P_hand(P), #PTRUE, P_angle(P), P_v(P)
        if P_aPwr(P)=2 then
        	E_ID=30:E_act=1:E_bank=0:gosub Echo
        else
            E_ID=4:E_act=1:E_bank=0:gosub Echo
        ENDIF
    ENDIF

	'Right border
    if Box_x2(1)>= #ORIGIN+(#VWIDTH-2) then
        GSpritePut (#ORIGIN+(#VWIDTH-2)) - (2*Box_w(1)), Box_y1(1), Box_hand(1), #FALSE
        GetBox 1, P_hand(P), #PTRUE, P_angle(P), P_v(P)
        if P_aPwr(P)=2 then
        	E_ID=30:E_act=1:E_bank=0:gosub Echo
        else
            E_ID=4:E_act=1:E_bank=0:gosub Echo
        ENDIF
    ENDIF

	'Bottom border
    if Box_y2(1)>=#ORIGIN+(#VHEIGHT-2) then
        GSpritePut Box_x1(1), (#ORIGIN+(#VHEIGHT-2)) - (2*Box_h(1)), Box_hand(1), #FALSE
        GetBox 1, P_hand(P), #PTRUE, P_angle(P), P_v(P)
        if P_aPwr(P)=2 then
        	E_ID=30:E_act=1:E_bank=0:gosub Echo
        else
            E_ID=4:E_act=1:E_bank=0:gosub Echo
        ENDIF
    ENDIF

    if #DBUG=#FALSE then
        'Check center line bounds

        if P_Side(P)=#FALSE then
            'i_f on left side, prevent player from going onto right side
            if Box_x2(1)>= #ORIGIN + #H_VWIDTH then
                GSpritePut (#ORIGIN + #H_VWIDTH) - (2*Box_w(1)), Box_y1(1), Box_hand(1), #FALSE
                GetBox 1, P_hand(P), #PTRUE, P_angle(P), P_v(P) 'Update sprite vars
            ENDIF

        else

            'i_f on right side, prevent player from going onto left side
            if Box_x1(1)<= #ORIGIN + #H_VWIDTH then
                GSpritePut (#ORIGIN + #H_VWIDTH), Box_y1(1), Box_hand(1), #FALSE
                GetBox 1, P_hand(P), #PTRUE, P_angle(P), P_v(P)
            ENDIF

        ENDIF
    ENDIF

    '@Disabled until get general collision detection working!
    if #PTRUE=#FALSE then
    'Check for collisions
    'TRAPCPU
    GetBox 1, P_hand(P), #PTRUE, P_angle(P), P_v(P)
    'TRAPCPU
    Hit=GSpriteCollide(#PTRUE,Box_hand(1),#FALSE,#FALSE,#FALSE)
    IF hit=#PTRUE then

        'Check object collisions (bumpers and wall only)
        FOR Ctr1 = 1 to #N_OBJS
            'i_f (SPRITECOLLIDEWITH(Box_hand(1)) = Objs(Ctr1).hand) AND (Objs(Ctr1).Type = 1 OR Objs(Ctr1).Type = 2) then
                GetBox 2, OB_hand(Ctr1), #PTRUE, #FALSE, #FALSE 'Get sprite vars for collided object
                'Do the collision, with appropriate sound effect
                'i_f OB_Type(Ctr1)= 1 then StdCol Pt(), 0, #FALSE, 5 else StdCol Pt(), 0, #FALSE, 4
            'endi_f
        NEXT Ctr1

        'Check primary puck collision
        'This code enables powerup collection
        if Opts(3)=#PTRUE then
            'i_f SPRITECOLLIDEWITH(Box_hand(1)) = Pucks&(1) then
                P_Hitter(P) = #PTRUE 'Set player as hitter
                'Make other NOT hitter
                if P = 1 then P_Hitter(2)=#FALSE else P_Hitter(1)=#FALSE
            'endi_f
        ENDIF
    ENDIF
    endif

 next P
}
*/

